Step 1: Change detection to detect walkers instead of vehicles (safedistancesensor.cpp):
#include "Carla/Walker/WalkerBase.h"
Box->GetOverlappingActors(DetectedActors, AWalkerBase::StaticClass());

Step 2: Change box to a sphere (safedistancesensor.cpp/.h):

#pragma once

#include "Carla/Sensor/Sensor.h"

#include "Carla/Actor/ActorDefinition.h"
#include "Carla/Actor/ActorDescription.h"

#include "Components/SphereComponent.h"

#include "SafeDistanceSensor.generated.h"

UCLASS()
class CARLA_API ASafeDistanceSensor : public ASensor
{
	GENERATED_BODY()

public:

	ASafeDistanceSensor(const FObjectInitializer& ObjectInitializer);

	static FActorDefinition GetSensorDefinition();

	void Set(const FActorDescription& ActorDescription) override;

	void SetOwner(AActor* Owner) override;

	virtual void PrePhysTick(float DeltaSeconds) override;

private:

	UPROPERTY()
	USphereComponent* Sphere = nullptr;
};

#include "Carla.h"
#include "Carla/Sensor/SafeDistanceSensor.h"

#include "Carla/Actor/ActorBlueprintFunctionLibrary.h"
#include "Carla/Game/CarlaEpisode.h"
#include "Carla/Util/BoundingBoxCalculator.h"
#include "Carla/Walker/WalkerBase.h"

ASafeDistanceSensor::ASafeDistanceSensor(const FObjectInitializer& ObjectInitializer)
    : Super(ObjectInitializer)
{
    Sphere = CreateDefaultSubobject<USphereComponent>(TEXT("SphereOverlap"));
    Sphere->SetupAttachment(RootComponent);
    Sphere->SetHiddenInGame(false); // Disable for debugging.
    Sphere->SetCollisionProfileName(FName("OverlapAll"));

    PrimaryActorTick.bCanEverTick = true;
}

FActorDefinition ASafeDistanceSensor::GetSensorDefinition()
{
    auto Definition = UActorBlueprintFunctionLibrary::MakeGenericSensorDefinition(
        TEXT("other"),
        TEXT("safe_distance"));

    FActorVariation Radius;
    Radius.Id = TEXT("safe_distance_radius");
    Radius.Type = EActorAttributeType::Float;
    Radius.RecommendedValues = { TEXT("500.0") }; // Default radius in centimeters
    Radius.bRestrictToRecommended = false;

    Definition.Variations.Append({ Radius });

    return Definition;
}

void ASafeDistanceSensor::Set(const FActorDescription& Description)
{
    Super::Set(Description);

    float Radius = UActorBlueprintFunctionLibrary::RetrieveActorAttributeToFloat(
        "safe_distance_radius", Description.Variations, 500.0f); // Default radius in centimeters

    // Debugging logs
    UE_LOG(LogCarla, Warning, TEXT("SafeDistanceSensor Radius: %f"), Radius);

    Sphere->SetSphereRadius(Radius);

    UE_LOG(LogCarla, Warning, TEXT("SafeDistanceSensor Final Radius: %f"), Sphere->GetScaledSphereRadius());
}

void ASafeDistanceSensor::SetOwner(AActor* Owner)
{
    Super::SetOwner(Owner);

    auto BoundingBox = UBoundingBoxCalculator::GetActorBoundingBox(Owner);

    // Adjust the sphere's location relative to the owner's bounding box
    Sphere->SetRelativeLocation(FVector{ 0.0f, 0.0f, BoundingBox.Extent.Z });
}

void ASafeDistanceSensor::PrePhysTick(float DeltaSeconds)
{
    Super::PrePhysTick(DeltaSeconds);

    TSet<AActor*> DetectedActors;
    Sphere->GetOverlappingActors(DetectedActors, AWalkerBase::StaticClass());
    DetectedActors.Remove(GetOwner());

    if (DetectedActors.Num() > 0)
    {
        // Debugging log to verify detected actors
        for (AActorA* Actor : DetectedActors)
        {
            UE_LOG(LogCarla, Warning, TEXT("SafeDistanceSensor detected actor: %s"), *Actor->GetName());
        }

        // Send data for detected actors
        auto Stream = GetDataStream(*this);
        Stream.SerializeAndSend(*this, GetEpisode(), DetectedActors);
    }
    else
    {
        UE_LOG(LogCarla, Warning, TEXT("SafeDistanceSensor detected no actors in proximity."));
    }
}